'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = falcorReducer;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _actions = require('./actions');

function endsWith(subjectString, searchString) {
  var position = subjectString.length;
  position -= searchString.length;
  var lastIndex = subjectString.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}

function omit(object, key) {
  var _old = object[key];

  var rest = _objectWithoutProperties(object, [key]);

  return rest;
}

var initialState = { loading: false, _requests: {} };

function falcorReducer(state, action) {
  if (state === undefined) state = initialState;
  var _state$loading = state.loading;
  var loading = _state$loading === undefined ? false : _state$loading;
  var _state$_requests = state._requests;

  var _requests = _state$_requests === undefined ? {} : _state$_requests;

  if (endsWith(action.type, '_REQUEST')) {
    var _extends2;

    return _extends({}, state, { loading: true, _requests: _extends({}, _requests, (_extends2 = {}, _extends2[action._id] = true, _extends2)) });
  }

  if (endsWith(action.type, '_FAILURE') || action.type === _actions.RETRIEVE_VALUE) {
    var requests = omit(_requests, action._id);
    return _extends({}, state, { loading: Object.keys(requests).length !== 0, _requests: requests });
  }

  switch (action.type) {
    case _actions.RETRIEVE_PATH:
    case _actions.RETRIEVE_PATHS:
    case _actions.SET_PATH:
    case _actions.SET_PATHS:
    case _actions.CALL_PATH:
      var requests = omit(_requests, action._id);
      var newState = _extends({}, state, { loading: Object.keys(requests).length !== 0, _requests: requests });
      if (!action.res) return newState;
      return _deepmerge2['default'](newState, action.res.json);

    case _actions.CLEAR:
      return { loading: loading, _requests: _requests };

    default:
      return state;
  }
}

module.exports = exports['default'];