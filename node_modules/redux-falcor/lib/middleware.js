'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = createFalcorMiddleware;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _actions = require('./actions');

function UnrecognizedActionTypeException(message) {
  this.message = message;
  this.name = 'UnrecognizedActionTypeException';
}

function createFalcorMiddleware(falcor) {
  return function falcorMiddleware() {
    return function (next) {
      return function (action) {
        var falcorPath = action.falcorPath;
        var type = action.type;

        var rest = _objectWithoutProperties(action, ['falcorPath', 'type']);

        if (!falcorPath) {
          return next(action);
        }

        var SUCCESS = type;
        var REQUEST = type + '_REQUEST';
        var FAILURE = type + '_FAILURE';

        next(_extends({}, rest, { type: REQUEST }));

        var promise = undefined;

        switch (type) {
          case _actions.RETRIEVE_PATH:
            promise = falcor.get(falcorPath);
            break;
          case _actions.RETRIEVE_PATHS:
            promise = falcor.get.apply(falcor, falcorPath);
            break;
          case _actions.RETRIEVE_VALUE:
            promise = falcor.getValue(falcorPath);
            break;
          case _actions.SET_PATH:
            promise = falcor.set(falcorPath);
            break;
          case _actions.SET_PATHS:
            promise = falcor.set.apply(falcor, falcorPath);
            break;
          case _actions.CALL_PATH:
            var args = rest.args;
            var refPaths = rest.refPaths,
                thisPaths = rest.thisPaths;

            if (!Array.isArray(args)) {
              args = [args];
            }

            if (thisPaths) {
              promise = falcor.call(falcorPath, args, refPaths, thisPaths);
            } else if (refPaths) {
              promise = falcor.call(falcorPath, args, refPaths);
            } else {
              promise = falcor.call(falcorPath, args);
            }

            break;
          default:
            throw new UnrecognizedActionTypeException('Do not know the action, ' + type);
        }

        return promise.then(function (res) {
          next(_extends({}, rest, { res: res, type: SUCCESS }));
          return res;
        })['catch'](function (error) {
          next(_extends({}, rest, { error: error, type: FAILURE }));
          return error;
        });
      };
    };
  };
}

module.exports = exports['default'];