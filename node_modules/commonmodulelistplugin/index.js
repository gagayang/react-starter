var path = require('path');
var fs = require('fs');
function CommonModuleListPlugin(options) {
	if(options !== undefined && typeof options !== "object" || Array.isArray(options)) {
		throw new Error("Argument should be an options object");
	}
	this.options = options || {};
}
module.exports = CommonModuleListPlugin;

function mkdirsSync(dirpath, filename) { 
    if (!fs.existsSync(dirpath)) {
        var pathtmp;
        dirpath.split(path.sep).forEach(function(dirname) {
            if (pathtmp) {
                pathtmp = path.join(pathtmp, dirname);
            }
            else {
            	if(!dirname){
            		pathtmp = path.sep+dirname;
            	}else{
            		pathtmp = dirname;
            	}
                
            }
            if (!fs.existsSync(pathtmp)) {
                if (!fs.mkdirSync(pathtmp, mode)) {
                    return false;
                }
            }
        });
    }
    return true; 
}

CommonModuleListPlugin.prototype.apply = function(compiler) {
	var options = this.options;
	var filePath = options.filePath;
	mkdirsSync(filePath);

	// optimize-module-ids
	compiler.plugin("compilation", function(compilation) {
		compilation.plugin("after-optimize-chunk-ids",  function(chunks) {
			var cLength = chunks.length;
			for(var i = 0; i < cLength; i++){
				var tempC = chunks[i];
				var chunkName = tempC.name;
				var chunkId = tempC.id;
				console.log(chunkName +" : "+chunkId);
				var chunkFileName = chunkName ? chunkName : chunkId;
				chunkFileName = chunkFileName+".text"
				var tempModules = tempC.modules;
				var tempModulesLength = tempModules.length;
				var tempChunkStr = "";
				for(var j = 0; j < tempModulesLength; j++){
					var tempModel = tempModules[j];
					var source = tempModel.resource;
					if(source){
						tempChunkStr = tempChunkStr+source+"\n";
					}
				}
				fs.writeFileSync(filePath+path.sep+chunkFileName, tempChunkStr, 'utf8');
			}
		});
	});
	
}